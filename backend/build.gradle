plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'java'
    id 'project-report'
    id 'org.openapi.generator' version "${openApiGeneratorVersion}"
}

sourceCompatibility = "${targetCompatibility}"
targetCompatibility = "${targetCompatibility}"

dependencyManagement {

    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

jar {
    enabled = false
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jar {
    enabled = false
}

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/openapi/src/main/java"
        }
        resources {
            srcDirs = [
                'src/main/openapi',
                'src/main/resources'
            ]
        }
    }
    test {
        java {
            srcDir "$buildDir/generated/openapi/src/main/java"
        }
    }
}

compileJava {
    dependsOn tasks.openApiGenerate
}

dependencies {

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    compileOnly "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "io.swagger.core.v3:swagger-annotations:${swaggerAnnotationsVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation "org.springdoc:springdoc-openapi-starter-webflux-ui:${springdocVersion}"

    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

    //runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.postgresql:r2dbc-postgresql'
}

testing {
    suites {

        test {
            useJUnitJupiter()
            dependencies {
                compileOnly 'org.projectlombok:lombok'
                annotationProcessor 'org.projectlombok:lombok'

                implementation 'org.mockito:mockito-junit-jupiter:5.12.0'
                implementation 'org.assertj:assertj-core:3.24.2'
                implementation 'org.hamcrest:hamcrest:2.2'
                implementation 'io.projectreactor:reactor-test'
            }
        }


        integrationTest(JvmTestSuite) {

            targets {
                all {
                    testTask.configure {
                        systemProperty('spring.profiles.active', 'test')
                    }
                }
            }

            dependencies {
                implementation project()

                sourceSets.main.runtimeClasspath

                implementation 'org.springframework.boot:spring-boot-starter-test'
                implementation 'org.springframework.security:spring-security-test'
                implementation "io.rest-assured:rest-assured:${restAssuredVersion}"
                implementation "io.rest-assured:spring-mock-mvc:${restAssuredVersion}"
                implementation "io.rest-assured:json-path:${restAssuredVersion}"
                implementation 'io.projectreactor:reactor-test'
            }
            sources {
                java {
                    srcDirs = [
                        'src/integration-test/java',
                        'src/main/java',
                        "$buildDir/generated/openapi/src/main/java"
                    ]
                }
                resources {
                    srcDirs = [
                        'src/integration-test/resources',
                        'src/main/resources'
                    ]
                }
            }
        }
    }
}

openApiValidate {
    inputSpec = "$projectDir/src/main/openapi/static/useful-articles-api.yaml".replace("\\","/")
    recommend = true
}

openApiGenerate {
    generatorName = "spring"
    //WORKAROUND for bug of OpenAPI 3.1.0 for Windows https://github.com/OpenAPITools/openapi-generator/issues/15202
    //Also you can fall back to 3.0.1
    inputSpec = "$projectDir/src/main/openapi/static/useful-articles-api.yaml".replace("\\","/")
    outputDir = "$buildDir/generated/openapi"
    groupId = "$project.group"
    id = "$project.name-openapi"
    version = "$project.version"
    apiPackage = "com.engilyin.usefularticles.ui.openapi.api"
    invokerPackage = "com.engilyin.usefularticles.ui.openapi.invoker"
    modelPackage = "com.engilyin.usefularticles.ui.openapi.model"
    configOptions = [
        java8                          : "true",
        dateLibrary                    : "java8",
        reactive                       : "true",
        library                        : "spring-boot",
        skipDefaultInterface           : "true",
        interfaceOnly                  : "true",
        useBeanValidation              : "true",
        hideGenerationTimestamp        : "true",
        openApiNullable                : "false",
        useSpringBoot3                 : "true",
        useOptional                    : "false",
        useSwaggerUI                   : "true",
        useTags                        : "true",
        useResponseEntity              : "false",
        jackson                        : "true",
        //additionalModelTypeAnnotations : "@jakarta.validation.Valid;@lombok.NoArgsConstructor;@lombok.AllArgsConstructor;@lombok.Builder;@lombok.extern.jackson.Jacksonized"
        additionalModelTypeAnnotations : "@jakarta.validation.Valid;@lombok.NoArgsConstructor"
    ]
}

openApiMeta {
    generatorName = "OpenApiConfig"
    packageName = "com.engilyin.usefularticles.ui.openapi.config"
    outputFolder = "$buildDir/generated/openapi"
}



bootJar.dependsOn ':useful-articles-frontend:npm_install'
bootJar.dependsOn ':useful-articles-frontend:buildFrontend'
