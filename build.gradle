plugins {
	id 'java'
	id 'com.diffplug.spotless' version "${spotlessVersion}" apply false
}


allprojects {
  group = 'com.engilyin'
  version = project.getProperty("version")=='unspecified'? "${baseVersion}-SNAPSHOT" : project.getProperty("version")
}


def copyrightHeader = """
 Copyright 2022-$YEAR engilyin

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""

subprojects {
    apply plugin: 'com.diffplug.spotless'
    
    if(!System.getenv("CICD")) {
        spotless {
          ratchetFrom 'origin/main'
          format 'misc', {
            target '*.md'
            trimTrailingWhitespace()
            leadingTabsToSpaces()
            endWithNewline()
          }
          java {
            target 'src/*/java/**/*.java'
            formatAnnotations()
            toggleOffOn()
            palantirJavaFormat()
            removeUnusedImports()
            trimTrailingWhitespace()
            endWithNewline()
            licenseHeader "/*\n$copyrightHeader\n*/"
          }
          typescript {
            target 'src/**/*.ts' // you have to set the target manually
        
            tsfmt()    
            prettier()
            eslint() 
            biome()
        
            licenseHeader "/*\n$copyrightHeader\n*/"
          }
          groovyGradle {
            target '*.gradle' // default target of groovyGradle
            greclipse()
          }
          json {
            target 'src/**/*.json'  
            simple()                             
            prettier().config(['parser': 'json']) 
            eclipseWtp('json')                    
            gson()                                
            jackson()                             
            biome()                               
            jsonPatch([])                        
          }
        }
    }

}

if (rootProject == project) {
    task installGitHook(type: Copy) {
        println 'Checking if Git hook needs to be copied...'

        def destinationFile = new File(rootProject.rootDir, '.git/hooks/pre-commit')

        onlyIf { !destinationFile.exists() } 

        from new File(rootProject.rootDir, 'hooks/pre-commit')
        into new File(rootProject.rootDir, '.git/hooks')
        filePermissions {
            unix 0775
        }
    }

    tasks.named("assemble").configure {
        dependsOn installGitHook
    }
}


